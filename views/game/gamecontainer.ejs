<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta charset="utf-8">
    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css">

    <!-- Compiled and minified JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>

    <!-- LOGIN/TIMELINE CSS -->
    <style>
    :root {
    --card-width:calc(90vw);
    }
    body {
        background-image: url("splash.jpg");
        background-repeat: no-repeat;
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh !important;
        width: 100vw !important;
        margin: 0 !important;
        padding: 0 !important;
        overflow: hidden !important;
    }
    .container {
        height: 100vh !important;
        min-width: 100vw !important;
        margin: 0 !important;
        padding: 0 !important;
        overflow-x: hidden !important;
        overflow-y: scroll !important;
    }
    .login-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .shake {
    animation-name: shake;
    animation-duration: 500ms;
    }

    @keyframes shake {
        0% { transform: translateX(0); }
        10% { transform: translateX(-10px); }
        20% { transform: translateX(10px); }
        30% { transform: translateX(-10px); }
        40% { transform: translateX(10px); }
        50% { transform: translateX(-10px); }
        60% { transform: translateX(10px); }
        70% { transform: translateX(-10px); }
        80% { transform: translateX(10px); }
        90% { transform: translateX(-10px); }
        100% { transform: translateX(0); }
    }
    .rowContainer {
        padding:20px;
        height: 100vh;
        overflow-y: scroll;
        width: 100%;
    }
	</style>
    <!-- TIMELINE CSS -->
    <style>
    .card-timeline {
        position: relative;
        width: var(--card-width);
        height: calc(var(--card-width) * 500 / 370);
        background-image: url("cardbg.png");
        background-size: cover;
        background-position: center;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        margin: 5vw !important;
        border-radius: 5vw !important;
    }

    .card-img {
        position: absolute;
        top: calc(var(--card-width) * 65 / 370);
        left: calc(var(--card-width) * 71 / 370);
        width: calc(var(--card-width) * 230 / 370);
        height: calc(var(--card-width) * 230 / 370);
        border-radius: 50%;
        overflow: hidden;

        
    }
    .card-img::after {
        content: "";
        background-image: radial-gradient(ellipse at center, rgba(0,0,0,0) 5%,rgba(0,0,0,1) 90%,rgba(0,0,0,1) 100%);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    .card-img img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .card-name {
        position: absolute;
        top: calc(var(--card-width) * 325 / 370);
        left: calc(var(--card-width) * 30 / 370);
        font-family: 'Arial', sans-serif;
        font-size: calc(var(--card-width) * 28 / 370);
        text-align: center;
        width: calc(var(--card-width) * 300 / 370);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: rgb(54, 54, 54);
    }

    .card-years {
        position: absolute;
        top: calc(var(--card-width) * 390 / 370);
        left: calc(var(--card-width) * 30 / 370);
        font-family: 'Arial', sans-serif;
        font-size: calc(var(--card-width) * 24 / 370);
        color: rgb(85, 85, 85);
        text-align: center;
        width: calc(var(--card-width) * 300 / 370);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .card-literature {
        position: absolute;
        top: calc(var(--card-width) * 470 / 370);
        left: calc(var(--card-width) * 100 / 370);
        font-family: 'Arial', sans-serif;
        font-size: calc(var(--card-width) * 15 / 370);
        text-align: center;
        width: calc(var(--card-width) * 155 / 370);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-style: oblique;
        color: rgb(185, 185, 185);
    }
    </style>
    <!-- DIALOG CSS -->
    <style>
    .chat-container {
        position: absolute;
        z-index: 999;
        top: 0;
        left: 0;
        width: 100vw !important;
        height: 100vh !important;
        display: flex;
        flex-direction: column;
        margin: 0;
        background-color: rgba(54, 54, 54,0.8);
        overflow: hidden !important;
        visibility: hidden;
    }
    .chat-window {
        position: absolute;
        top: 5vh;
        left: 0;
        width: 100vw !important;
        height: 70vh !important;
        display: flex;
        flex-direction: column;
        margin: 0;
        background-color: rgba(54, 54, 54,0.8);
        overflow: hidden !important;
        border-radius: 5vw;
    }
  
    .chat-header {
        display: flex;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #2f3b43;
        background-color: #202c33;
        color: #e9edef;
    }

    .profile-pic-cropper {
        width: 50px;
        height: 50px;
        overflow: hidden;
        border-radius: 50%;
    }
  
    .profile-pic {
        position: relative;
        top:0;
        left: 0;
        width: 50px;
        height: auto;
    }
  
    .chat-body {
        height: 100% !important;
        overflow-y: scroll;
        display: flex;
        flex-direction: column;
        padding: 10px;
        background-color: #0b141a;
    }
  
    .user-message {
        align-self: flex-end;
        background-color: #005c4b;
        color: white;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        max-width: 70%;
    }
  
    .other-message {
        align-self: flex-start;
        background-color: #202c33;
        color: white;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        max-width: 70%;
    }
  
    .chat-input {
        display: flex;
        align-items: center;
        padding: 10px;
        border-top: 1px solid #2f3b43;
        background-color: #202c33;
    }
  
    .chat-input input {
        flex: 1;
        border: none;
        outline: none;
        font-size: 16px;
        margin-right: 10px;
        background-color: #425b69 !important;
        border-radius: 8px !important;
        padding-left: 10px !important;
        color: white;
    }
  
    .chat-input button {
        border: none;
        outline: none;
        background-color: #8696a0;
        color: #202c33;
        font-weight: 700;
        padding: 8px 16px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        margin-left: 10px;
    }
    .closeBTN {
        position: absolute;
        top: 10px;
        right: 10px;
        color: #e9edef;
        cursor: pointer;
    }

    #chat-body::-webkit-scrollbar {
        width: 6px;
    }

    #chat-body::-webkit-scrollbar-track {
        background-color: #323a3f; 
        border-radius: 0px;
    }

    #chat-body::-webkit-scrollbar-thumb {
        border-radius: 0px;
        background-color: #323a3f; 
    }
    </style>
    <!--LOADING  CSS-->
    <style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 2s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .profileClass {
        padding-left: 1em;
    }
    </style>

    <title>TimeWise</title>
</head>
<body>
<!-- LOADING HTML -->
<div id="loadingOverlay" class="loading-overlay" style="display:none;">
    <div class="loading-spinner"></div>
</div>
<!-- DIALOG HTML -->
<div id="chat-window" class="chat-container">
    <div class="chat-window">    
        <div class="chat-header">
            <div class="profile-pic-cropper">
                <img id="profileImg" class="profile-pic">
            </div>
            <span class="profileClass" id="profileName"></span>
        </div>
        <div #chat-body id="chat-body" class="chat-body"></div>
        <div class="chat-input">
            <input type="text" id="dialog-input" placeholder="Type a message...">
            <button id="send-button" onclick="sendDialog()">Send</button>
        </div>
        <a class="closeBTN" onclick="closeDialog()"><i class="material-icons" class="closeBTNTXT">clear</i></a>
    </div>
</div>
<!-- LOGIN/TIMELINE HTML -->
<div id="mainRow" class="container">
    <div id="containerRow" class="row">
        <div id="loginPopup" class="col s12">
            <div class="card cardClass">
                <div class="card-content">
                    <span class="card-title textSize">Login</span>
                    <div class="row">
                        <div class="input-field col s12">
                            <i class="material-icons prefix textSize">account_circle</i>
                            <input id="username" type="text" class="textColor textSize">
                            <label for="username" class="textColor textSize">Username</label>
                        </div>
                        <div class="input-field col s12">
                            <i class="material-icons prefix textSize">lock</i>
                            <input id="password" type="password" class="textColor textSize">
                            <label for="password" class="textColor textSize">Password</label>
                        </div>
                    </div>
                </div>
                <div class="card-action">
                    <a id="loginBtn" class="waves-effect waves-light btn textSize" onclick="postLogin()">Login</a>
                </div>
            </div>
        </div>
    </div>
</div>
<!--LOGIN SCRIPT-->
<script>
    var userid;
    var actualTimeline;

    const postLogin = async () => {
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        console.log("postLogin")
        try {
            const response = await axios.post('/login', {
            username: usernameInput.value,
            password: passwordInput.value
            });
            if (response.data.success) {
                userid = response.data.userid;
                proceedWithGame();
            } else {
            // handle unsuccessful login
                showError();
            }
        } catch (error) {
            showError();
        }
    };

    const showError = () => {
        const inputs = document.querySelectorAll('.input-field input');
        inputs.forEach(input => {
            input.classList.add('invalid');
            input.nextElementSibling.classList.add('active');
            input.nextElementSibling.classList.add('invalid');
            input.disabled = true;
        });
        const card = document.querySelector('.card');
        card.classList.add('shake');
        setTimeout(() => {
            inputs.forEach(input => {
            input.classList.remove('invalid');
            input.disabled = false;
            input.value = "";
            input.nextElementSibling.classList.remove('active');
            input.nextElementSibling.classList.remove('invalid');
            });
            card.classList.remove('shake');
        }, 3000);
    };
    const proceedWithGame = () => {
        const loginPopup = document.getElementById('loginPopup');
        loginPopup.style.transition = 'transform 1s ease, opacity 1s ease';
        loginPopup.style.transform = 'translateX(-100%)';
        loginPopup.style.opacity = '0';

        loginPopup.addEventListener('transitionend', function() {
            loginPopup.remove();
        });

        setTimeout(() => {
            getTimeline();
        }, 1000);
    };
    </script>
    <!-- TIMELINE SCRIPT -->
    <script>
    async function getTimeline() {
        const containerRow = document.getElementById('containerRow');
        containerRow.remove();

        try {
            const data = { userid: userid };
            const response = await axios.get(`/getUserTimeline?userId=` + userid, {
            headers: { "Content-Type": "application/json" },
            method: "GET",
            });

            const timelines = response.data;

            const mainRow = document.getElementById("mainRow");
            mainRow.classList.add("row","rowContainer")

            const fadeInTime = 250;

            for (let i = 0; i < timelines.length; i++) {
                const timeline = timelines[i];

                const card = document.createElement("div");
                card.classList.add("card","card-timeline", "col");
                const imgDiv = document.createElement("div");
                imgDiv.classList.add("card-img");
                const img = document.createElement("img");
                img.src = timeline.lastName + ".jpg";
                imgDiv.appendChild(img);
                const name = document.createElement("div");
                name.classList.add("card-name");
                name.innerText = timeline.fullName;
                const years = document.createElement("div");
                years.classList.add("card-years");
                years.innerText = timeline.birthYear + " | " + timeline.deathYear;
                const literature = document.createElement("div");
                literature.classList.add("card-literature");
                literature.innerText = timeline.literatureType;
                card.appendChild(imgDiv);
                card.appendChild(name);
                card.appendChild(years);
                card.appendChild(literature);

                // Apply fade-in and left-to-right transition
                card.style.transition = 'transform 1s ease, opacity 1s ease';
                card.style.transform = 'translateX(-100%)';
                card.style.opacity = '0';

                setTimeout(() => {
                    card.style.opacity = 1;
                    card.style.transform = "none";
                }, i * fadeInTime);

                card.addEventListener("click", () => {
                    actualTimeline = timeline;
                    setupChat();
                });

                mainRow.appendChild(card);
            }
        } catch (error) {
            alert(error);
        }
    }
    </script>
    <!--DIALOG SCRIPT-->
    <script>
    function setupChat() {
        var profileName = document.getElementById('profileName');
        var profileImg = document.getElementById('profileImg');

        profileName.innerText = actualTimeline.fullName;
        profileImg.src = actualTimeline.lastName + ".jpg";

        let chatWindow = document.getElementById("chat-window");
        chatWindow.style.visibility = "visible";
    }
    
    async function getDialog(dialogTXT) {
        try {
            const data = { userid: userid };
            const response = await axios.get('/dodialog?userId='+userid+'&dialog='+dialogTXT+'&to='+actualTimeline.lastName, {
            headers: {'Content-Type': 'application/json',},
            method: 'GET'
            });
                
            addOtherMessage(response.data.dialogResponse);
            } catch (error) {
            addOtherMessage(error);
        }
    }
    
    // Add a user message to the chat window
    const addUserMessage = (message) => {
        let chatBody = document.getElementById('chat-body');

        const messageDiv = document.createElement('div');
        messageDiv.classList.add('user-message');
        messageDiv.innerText = message;
        chatBody.appendChild(messageDiv);
    }
    
    // Add another message to the chat window
    const addOtherMessage = (message) => {
        let chatBody = document.getElementById('chat-body');
        
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('other-message');
        messageDiv.innerText = message;
        chatBody.appendChild(messageDiv);

        chatBody.scrollTop = chatBody.scrollHeight;
    }
    
    // Event listener for the send button
    const sendDialog = async () => {
        let dialogInput = document.getElementById('dialog-input');
        let dialog = dialogInput.value;

        if (!dialog) return; // exit the function if input is empty

        addUserMessage(dialog);
        dialogInput.value = "";

        // Show the loading overlay
        let loadingOverlay = document.getElementById('loadingOverlay');
        loadingOverlay.style.display = 'flex';

        try {
            const data = { userid: userid };
            const response = await axios.get('/dodialog?userId='+userid+'&dialog='+dialog+'&to='+actualTimeline.lastName, {
            headers: {'Content-Type': 'application/json',},
            method: 'GET'
            });

            addOtherMessage(response.data.dialogResponse);
        } catch (error) {
            addOtherMessage(error);
        } finally {
            // Hide the loading overlay
            loadingOverlay.style.display = 'none';
        }
    };
    const closeDialog = () => {
        let chatWindow = document.getElementById("chat-window");
        chatWindow.style.visibility = "hidden";
        
        let chatBody = document.getElementById('chat-body');
        chatBody.innerHTML = "";
    }
    </script>
</body>
</html>
